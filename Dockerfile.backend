# ===================================================================
# VPN代理Web应用 - 后端专用Docker构建文件
# 
# 此Dockerfile专门用于构建后端服务，包含：
# - Flask API服务器
# - 代理服务器功能（HTTP/SOCKS5）
# - WebSocket实时通信
# - 不包含前端文件，适用于微服务架构
# ===================================================================

# 使用Python 3.11 Slim镜像作为基础镜像
# Slim版本相比完整版本更小，适合生产环境
FROM python:3.11-slim

# 设置应用工作目录
WORKDIR /app

# ===================================================================
# 系统依赖安装
# ===================================================================

# 安装编译依赖和系统工具
# gcc：编译某些Python包（如psutil、cryptography等）时需要
# 清理apt缓存以减小最终镜像大小
RUN apt-get update && apt-get install -y \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# ===================================================================
# 应用代码复制
# ===================================================================

# 复制Python依赖文件（现在在backend目录中）
COPY backend/requirements.txt .

# 安装Python依赖包
# --no-cache-dir：不缓存pip下载的包，减小镜像大小
RUN pip install --no-cache-dir -r requirements.txt

# 复制后端源代码到容器
# 包含所有Python模块：app.py, api_routes.py, proxy_server.py等
COPY backend/ .

# ===================================================================
# 运行时配置
# ===================================================================

# 暴露Flask API服务端口
EXPOSE 5000

# 设置Python环境变量
# PYTHONPATH：确保Python能正确导入backend模块
# FLASK_ENV：设置Flask运行环境为生产模式
ENV PYTHONPATH=/app
ENV FLASK_ENV=production

# ===================================================================
# 应用启动配置
# ===================================================================

# 暴露代理服务端口（除了API端口）
EXPOSE 8888

# 创建日志目录
RUN mkdir -p /app/logs

# 使用生产环境启动脚本
# 在Kubernetes环境中提供更好的错误处理和日志
CMD ["python", "start_production.py"]
